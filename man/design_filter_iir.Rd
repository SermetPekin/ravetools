% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter.R
\name{design_filter_iir}
\alias{design_filter_iir}
\title{Design an 'IIR' filter}
\usage{
design_filter_iir(
  family = c("butter", "cheby1", "cheby2", "ellip"),
  sample_rate,
  filter_order = NA,
  high_pass_freq = NA,
  high_pass_trans_freq = NA,
  low_pass_freq = NA,
  low_pass_trans_freq = NA,
  peak_attenuation = NA,
  trans_attenuation = NA
)
}
\arguments{
\item{family}{filter family name, choices are \code{"butter"},
\code{"cheby1"}, \code{"cheby2"}, and \code{"ellip"}}

\item{sample_rate}{sampling frequency}

\item{filter_order}{suggested filter order. Notice filters with higher orders
may become numerically unstable, hence this number is only a suggested
number. If the filter is unstable, this function will choose a lower order;
leave this input \code{NA} (default) if undecided.}

\item{high_pass_freq}{high-pass frequency; default is \code{NA} (no high-pass
filter will be applied)}

\item{high_pass_trans_freq}{high-pass frequency band-width; default
is automatically inferred from filter type.}

\item{low_pass_freq}{low-pass frequency; default is \code{NA} (no
low-pass filter will be applied)}

\item{low_pass_trans_freq}{low-pass frequency band-width; default
is automatically inferred from filter type.}

\item{peak_attenuation}{expected power attenuation (in decibel) at high-pass
low pass frequencies. For 'Butterworth' filters, we recommend set to
\code{NA} and let the algorithm estimate automatically;
for all other filters, this is the allowable pass-band ripple, and
default value is \code{1} dB.}

\item{trans_attenuation}{power attenuation (in decibel) at
transition frequency. For 'Butterworth' filters, default is \code{3} dB
(half power); For all other filters, this is the minimum attenuation in the
stop band and default is \code{12} dB.}
}
\value{
A filter generator function.
}
\description{
Design an 'IIR' filter
}
\examples{

sample_rate <- 500

my_diagnose <- function(
    filter, vlines = c(8, 12), cutoffs = c(-3, -6)) {
  diagnose_filter(
    b = filter$b,
    a = filter$a,
    fs = sample_rate,
    vlines = vlines,
    cutoffs = cutoffs
  )
}

# ---- Default using butterworth to generate 8-12 bandpass filter ----

# Butterworth filter with cut-off frequency
# 7 ~ 13 (default transition bandwidth is 1Hz) at -3 dB
iir_generator <- design_filter_iir(
  family = "butter",
  low_pass_freq = 12,
  high_pass_freq = 8,
  sample_rate = 500
)

# magnitude decay is
#  8-12 Hz: around -0.2 dB
#  7-8 Hz and 12-13 Hz: -3 dB
filter <- iir_generator()
print(filter$check)

my_diagnose(filter)

## explicit bandwidths and attenuation (sharper transition)

# Butterworth filter with cut-off frequency
# 7.75 ~ 12.25 Hz, at -6 dB
iir_generator <- design_filter_iir(
  family = "butter",
  low_pass_freq = 12, low_pass_trans_freq = 0.25,
  high_pass_freq = 8, high_pass_trans_freq = 0.25,
  sample_rate = 500, trans_attenuation = 6
)

# magnitude decay is
#  8-12 Hz: around -3 dB
#  7-8 Hz and 12-13 Hz: -6 dB
filter <- iir_generator()
filter$check

my_diagnose(filter)

# ---- cheby1 --------------------------------

# pass-band: 8-12 Hz with ripple 1 dB
# stop-band: 7-13 Hz with minimum power attenuation 12 dB (default)
filter <- design_filter_iir(
  family = "cheby1",
  low_pass_freq = 12,
  high_pass_freq = 8,
  sample_rate = 500
)()

my_diagnose(filter)

# ---- cheby2 --------------------------------

# pass-band: 8-12 Hz with ripple 1 dB
# stop-band: 7-13 Hz with minimum power attenuation 40 dB
filter <- design_filter_iir(
  family = "cheby2",
  low_pass_freq = 12,
  high_pass_freq = 8,
  trans_attenuation = 40,
  sample_rate = 500
)()

my_diagnose(filter)

# ----- ellip ---------------------------------

# pass-band: 8-12 Hz with ripple 1 dB
# stop-band: 7.75-12.25 Hz with minimum power attenuation 30 dB
filter <- design_filter_iir(
  family = "ellip",
  low_pass_freq = 12, low_pass_trans_freq = 0.25,
  high_pass_freq = 8, high_pass_trans_freq = 0.25,
  trans_attenuation = 30,
  sample_rate = 500
)()

my_diagnose(filter)



}
