% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter-fir-design.R
\name{design_filter_fir}
\alias{design_filter_fir}
\title{Design \code{'FIR'} filter using \code{\link{firls}}}
\usage{
design_filter_fir(
  sample_rate,
  filter_order = NA,
  data_size = NA,
  high_pass_freq = NA,
  high_pass_trans_freq = NA,
  low_pass_freq = NA,
  low_pass_trans_freq = NA,
  trans_attenuation = 3
)
}
\arguments{
\item{sample_rate}{sampling frequency}

\item{filter_order}{filter order, leave \code{NA} (default) if undecided}

\item{data_size}{minimum length of data to apply the filter, used to
decide the maximum filter order. For 'FIR' filter, data length must be
greater than \code{3xfilter_order}}

\item{high_pass_freq}{high-pass frequency; default is \code{0} (no high-pass
filter will be applied)}

\item{high_pass_trans_freq}{high-pass frequency band-width; default
is automatically inferred from data size.
Frequency \code{high_pass_freq - high_pass_trans_freq} if the cutoff
frequency at power \code{-trans_attenuation}; see input
\code{trans_attenuation} or run \code{print(design_filter_fir)}
for illustration}

\item{low_pass_freq}{low-pass frequency; default is 'Nyquist' frequency (no
low-pass filter will be applied)}

\item{low_pass_trans_freq}{low-pass frequency band-width; default
is automatically inferred from data size.
Frequency \code{low_pass_freq + low_pass_trans_freq} if the cutoff
frequency at power \code{-trans_attenuation}; see input
\code{trans_attenuation} or run \code{print(design_filter_fir)} for
illustration}

\item{trans_attenuation}{allowable power attenuation (in decibel) at
transition frequency; default is \code{3} dB, which is half power.}
}
\value{
Function that generates the 'FIR' filter given filter order
}
\description{
Design \code{'FIR'} filter using \code{\link{firls}}
}
\details{
Filter type is determined from \code{high_pass_freq} and
\code{low_pass_freq}. High-pass frequency is ignored if \code{high_pass_freq}
is less equal to 0, hence the filter is low-pass filter. When
\code{low_pass_freq} is greater equal to 'Nyquist' frequency, then
the filter is high-pass filter. When both \code{high_pass_freq} and
\code{low_pass_freq} are valid (positive, less than 'Nyquist'), then
the filter is a band-pass filter if band-pass is less than low-pass
frequency, otherwise the filter is band-stop.

Although the peak amplitudes are set by \code{low_pass_freq} and
\code{high_pass_freq}, the transition from peak amplitude to zero require
a transition, which is tricky but also important to set.
When 'FIR' filters have too steep transition boundaries, the filter tends to
have ripples in peak amplitude, introducing artifacts to the final signals.
When the filter is too flat, components from unwanted frequencies may also
get aliased into the filtered signals. Ideally, the transition bandwidth
cannot be too steep nor too flat. In this function, users may control
the transition frequency bandwidths via \code{low_pass_trans_freq} and
\code{high_pass_trans_freq}. The power at the end of transition is defined
by \code{trans_attenuation}, with default value of \code{3} (i.e.
-3 dB, this number is automatically negated during the calculation).
By design, a low-pass 5 Hz filter with 1 Hz transition bandwidth results in
attenuating -3 dB power at 6 Hz, and -6 dB at 7 Hz (\code{5 + 1 x 2}).
Common choices of \code{trans_attenuation} are \code{3} (half power at
the transition boundary) and \code{6} (half amplitude at the transition
boundary).
}
\examples{

# see illustration by `print(design_filter_fir)`

# ---- FIR band-pass example -----------------------------

sample_rate <- 500

fir_generator <- design_filter_fir(
  sample_rate = sample_rate,
  high_pass_freq = 1, high_pass_trans_freq = 0.25,
  low_pass_freq = 50, low_pass_trans_freq = 6
)

# check generator information
print(fir_generator)

filter <- fir_generator()

# -3dB cutoff (50\% power) should be roughly within
# 0.75 (=1-0.25) ~ 56 (=50+6) Hz
diagnose_filter(
  filter$b, filter$a,
  fs = sample_rate,
  n = 1000,
  vlines = c(1, 50)
)

# ---- High-pass filter with auto bandwith from data -----

sample_rate <- 500

fir_generator <- design_filter_fir(
  sample_rate = sample_rate,
  data_size = 1000,
  high_pass_freq = 6
)

print(fir_generator)

filter <- fir_generator()

# -3dB cutoff should cover 6 Hz to Nyquist frequency
diagnose_filter(
  filter$b, filter$a,
  fs = sample_rate,
  n = 1000,
  vlines = 6,
  xlim = c(0, 50)
)

# ---- Low-pass filter with auto bandwith from filter order -----

sample_rate <- 500

fir_generator <- design_filter_fir(
  sample_rate = sample_rate,
  filter_order = 200,
  low_pass_freq = 6
)

print(fir_generator)

filter <- fir_generator()

# -3dB cutoff should cover 0-6 Hz
diagnose_filter(
  filter$b, filter$a,
  fs = sample_rate,
  n = 1000,
  vlines = 6,
  xlim = c(0, 50)
)

# ---- Band-stop filter when data size is small -----
sample_rate <- 500

# cannot have too sharp transition
fir_generator <- design_filter_fir(
  sample_rate = sample_rate,
  filter_order = 200,
  low_pass_freq = 6,
  high_pass_freq = 8
)

print(fir_generator)

filter <- fir_generator(scale = FALSE)

# -3dB cutoff should cover 0-6 Hz & 8-Nyquist
diagnose_filter(
  filter$b, filter$a,
  fs = sample_rate,
  n = 1000,
  vlines = 6,
  xlim = c(0, 50)
)


}
